{"ast":null,"code":"var _jsxFileName = \"/Users/skkim/git/study/cycle-1/react-tutorial/src/Pages/HooksState/UseMemo/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  _s();\n\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n  const onChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs(inputs => ({ ...inputs,\n      [name]: value\n    }));\n  }, []);\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]);\n  const nextId = useRef(4);\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers(users => users.concat(user));\n    setInputs({\n      username: '',\n      email: ''\n    });\n    nextId.current += 1;\n  }, [username, email]); // const onRemove = useCallback(id => {\n  //   // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n  //   // = user.id 가 id 인 것을 제거함\n  //   setUsers(users => users.filter(user => user.id !== id));\n  // }, []);\n\n  const onRemove = id => {\n    console.log(\"재생성\"); // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n    // = user.id 가 id 인 것을 제거함\n\n    setUsers(users => users.filter(user => user.id !== id));\n  };\n\n  const onToggle = useCallback(id => {\n    setUsers(users => users.map(user => user.id === id ? { ...user,\n      active: !user.active\n    } : user));\n  }, []);\n  const count = useMemo(() => countActiveUsers(users), [users]); // const count = countActiveUsers(users);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      username: username,\n      email: email,\n      onChange: onChange,\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790 \\uC218 : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"vgsTpk1R6YyKMV7Ew61p+WsQGMI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skkim/git/study/cycle-1/react-tutorial/src/Pages/HooksState/UseMemo/index.js"],"names":["React","useRef","useState","useMemo","useCallback","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","App","inputs","setInputs","username","email","onChange","e","name","value","target","setUsers","id","nextId","onCreate","current","concat","onRemove","onToggle","map","count"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const { username, email } = inputs;\n  const onChange = useCallback(e => {\n    const { name, value } = e.target;\n    setInputs(inputs => ({\n      ...inputs,\n      [name]: value\n    }));\n  }, []);\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'tester',\n      email: 'tester@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'liz',\n      email: 'liz@example.com',\n      active: false\n    }\n  ]);\n\n  const nextId = useRef(4);\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers(users => users.concat(user));\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    nextId.current += 1;\n  }, [username, email]);\n\n  // const onRemove = useCallback(id => {\n  //   // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n  //   // = user.id 가 id 인 것을 제거함\n  //   setUsers(users => users.filter(user => user.id !== id));\n  // }, []);\n\n  const onRemove = id => {\n    console.log(\"재생성\");\n    // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n    // = user.id 가 id 인 것을 제거함\n    setUsers(users => users.filter(user => user.id !== id));\n  };\n  const onToggle = useCallback(id => {\n    setUsers(users =>\n      users.map(user =>\n        user.id === id ? { ...user, active: !user.active } : user\n      )\n    );\n  }, []);\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  // const count = countActiveUsers(users);\n  return (\n    <>\n      <CreateUser\n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n      <div>활성사용자 수 : {count}</div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}